#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from inicheck.config import MasterConfig, UserConfig
from inicheck.tools import get_user_config, check_config
from inicheck.output import print_config_report, generate_config
from inicheck.tools import cast_all_variables
from smrf.utils import utils, io
from awsm.framework.framework import run_awsm
from datetime import datetime
import sys
import os
import argparse
import numpy as np
import pandas as pd
import pytz
import copy


def mod_config_weekly(config_file, start_date):
    """
    Run each day seperately. Calls run_awsm
    """
    # define some formats
    fmt_day = '%Y%m%d'
    fmt_cfg = '%Y-%m-%d %H:%M'
    add_day = pd.to_timedelta(24, unit='h')
    add_hr = pd.to_timedelta(1, unit='h')

    # get config instance
    config = get_user_config(config_file,
                             modules = ['snowav'])

    config.apply_recipes()
    config = cast_all_variables(config, config.mcfg)

    # get the water year
    #cfg_start_date = pd.to_datetime(config.cfg['time']['start_date'])
    tzinfo = pytz.timezone(config.cfg['time']['time_zone'])
    wy = utils.water_day(start_date.replace(tzinfo=tzinfo))[1]

    # set days up for time period
    sd = start_date - 6*add_day
    ed = start_date + 23*add_hr

    new_config = copy.deepcopy(config)

    # set the start and end dates

    new_config.raw_cfg['outputs']['start_date'] = sd.strftime(fmt_cfg)
    new_config.raw_cfg['outputs']['end_date'] = ed.strftime(fmt_cfg)

    return new_config


def run():
    '''
    This program will run each day as a seperate run
    '''

    # Parse arguments
    p = argparse.ArgumentParser(description='Run SNOWAV weekly using Airflow scheduler.')

    p.add_argument('-c', '--cfg', required=True,
                   help='Config file that will be modified for the current run period')

    p.add_argument('-sd','--start_date', required=True,
                    help="start date for run, should be execution date from airflow")


    args = p.parse_args()

    start_date = pd.to_datetime(args.start_date)
    fp_cfg = args.cfg

    # set dates and paths
    new_config = mod_config_weekly(fp_cfg, start_date)

    # apply recipes with new setttings
    new_config.apply_recipes()
    new_config = cast_all_variables(new_config, new_config.mcfg)

    # run_awsm(new_config)
    # initialize awsm to run snowav


if __name__ == '__main__':
    run()
