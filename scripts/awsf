#!/usr/bin/env python
# -*- coding: utf-8 -*-

import awsf
from datetime import datetime
import sys
import cProfile

def run():
    start = datetime.now()

    configFile = '../test_data/AWSF_test_config_tuol.ini'
    if len(sys.argv) > 1:
        configFile = sys.argv[1]


    #===============================================================================
    # Initialize and run basin
    #===============================================================================
    #

    # 1. initialize
    # try:
    with awsf.framework.framework.AWSF(configFile) as a:

        if not a.do_wrf:
            if not a.config['isnobal restart']['restart_crash']:
            # distribute data by running smrf
                if a.do_smrf:
                    a.runSmrf()

                # convert smrf output to ipw for iSnobal
                if a.do_make_in:
                    a.nc2ipw('smrf')

                if a.do_isnobal:
                    # run iSnobal
                    a.run_isnobal()

                    # convert ipw back to netcdf for processing
                if a.do_make_nc:
                    a.ipw2nc('smrf')
            # if restart
            else:
                if a.do_isnobal:
                    # restart iSnobal from crash
                    a.restart_crash_image()
                    # convert ipw back to netcdf for processing
                    if a.do_make_nc:
                        a.ipw2nc('smrf')

        # perform same operations using gridded WRF data
        elif a.do_wrf:
            if a.do_smrf:
                a.runSmrf_wrf()

            if a.do_make_in:
                a.nc2ipw('wrf')

            if a.do_isnobal:
                a.run_isnobal_forecast()

            if a.do_make_nc:
                a.ipw2nc('wrf')

        # Run iPySnobal from SMRF in memory
        if a.do_smrf_ipysnobal:
            a.run_smrf_ipysnobal()

        a._logger.info('AWSF finished in: {}'.format(datetime.now() - start) )

if __name__ =='__main__':
    run()
